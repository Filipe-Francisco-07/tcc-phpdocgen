<?php

namespace App\Parser;

/**
 * Classe responsável por normalizar código PHP, ajustando sua estrutura e formato.
 */
final class Normalizador
{

    /**
     * Normaliza o código PHP bruto, encapsulando-o em estruturas apropriadas.
     * 
     * A função verifica se o código começa com uma tag PHP e o encapsula em um arquivo, função ou método de classe, conforme necessário, contando as linhas adicionadas no processo.
     * 
     * @param string $raw O código PHP bruto a ser normalizado.
     * @return array Um array contendo o código normalizado, um booleano indicando se foi encapsulado e o número de linhas adicionadas.
     */
    public function normalizar(string $raw): array
    {
        $s = ltrim($raw);

        if (preg_match('/^\<\?php\b/u', $s)) {
            return [$raw, false, 0];
        }

        $linhasAdd = 0;
        $isFrag = true;

        $startsWith = fn (string $re) => (bool)preg_match($re . 'u', $s);

        $wrapAsFile = function (string $body) use (&$linhasAdd): string {
            $prefix = "<?php\n";
            $linhasAdd = substr_count($prefix, "\n");
            return $prefix . $body . "\n";
        };

        $wrapAsFunction = function (string $body) use (&$linhasAdd): string {
            $prefix = "<?php\nfunction __tmp__() {\n";
            $suffix = "\n}\n";
            $linhasAdd = substr_count($prefix, "\n");
            return $prefix . rtrim($body) . $suffix;
        };

        $wrapAsClassMethod = function (string $method) use (&$linhasAdd): string {
            $prefix = "<?php\nclass __Tmp__ {\n";
            $suffix = "\n}\n";
            $linhasAdd = substr_count($prefix, "\n");
            return $prefix . rtrim($method) . $suffix;
        };

        if ($startsWith('/^(namespace\s+[A-Za-z0-9_\\\\]+;\s*)/')) {
            return [$wrapAsFile($s), true, $linhasAdd];
        }
        if ($startsWith('/^(use\s+[A-Za-z0-9_\\\\]+(?:\s+as\s+[A-Za-z0-9_]+)?\s*;)/')) {
            return [$wrapAsFile($s), true, $linhasAdd];
        }
        if ($startsWith('/^(class|interface|trait|enum)\b/')) {
            return [$wrapAsFile($s), true, $linhasAdd];
        }
        if ($startsWith('/^function\b/')) {
            return [$wrapAsFile($s), true, $linhasAdd];
        }
        if ($startsWith('/^(public|protected|private)\s+function\b/')) {
            return [$wrapAsClassMethod($s), true, $linhasAdd];
        }
        if ($startsWith('/^(public|protected|private)\b/')) {
            return [$wrapAsClassMethod($s), true, $linhasAdd];
        }
        if ($startsWith('/[;{}]/')) {
            return [$wrapAsFunction($s), true, $linhasAdd];
        }

        return [$wrapAsFile($s), true, $linhasAdd];
    }
}
